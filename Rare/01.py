# Функция, которая применяет переданную функцию `func` к значению `value` `n` раз
def apply_function_n_times(func, n, value):
    for _ in range(n):  # Цикл, который выполнится `n` раз
        value = func(value)  # Применение функции `func` к текущему значению `value`
    return value  # Возвращение итогового значения после `n` применений функции

# Генератор, который фильтрует элементы последовательности, оставляя только те,  иммиикоторые изменились значительно после применения функции `func` `n` раз
def significant_change_generator(sequence, func, n, threshold=1):
    for item in sequence:  # Проход по каждому элементу в последовательности
        new_item = apply_function_n_times(func, n, item)  # Применение функции `func` `n` раз к текущему элементу
        if abs(new_item - item) >= threshold:  # Проверка, изменилось ли значение значительно
            yield new_item  # Если да, возвращение нового значения как часть генератора

# Пример использования:

# Функция, которая будет применяться (возведение числа в квадрат)
def square(x):
    return x ** 2

# Последовательность чисел
sequence = [1, 2, 3, 4, 5]

# Количество раз, которое нужно применить функцию `square` к каждому элементу
n = 2

# Порог значительного изменения (разница между исходным и новым значением должна быть >= threshold)
threshold = 10

# Фильтрация элементов последовательности, оставляя только те, которые изменились значительно
result = list(significant_change_generator(sequence, square, n, threshold))

# Вывод результата
print(result)